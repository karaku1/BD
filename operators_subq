/* Оператор exists */
/* Подзапросы с оператором exists возрашают логическое значение true иди false */
/* При наличии любого не пустого результата, выводимого подзапросом , exist принимает значение true. При отстутствии данных, возвращаемый подзапросом , exist принимает значение false */
SELECT 
    cnum, cname, city
FROM
    customers
WHERE
    EXISTS (SELECT 
		*
        FROM
            customers
        WHERE
            city = 'Новосибирск');
/* Примеры использования exists с коррелированными подзапросами */
/* Результатом запроса является информация о покупателях, которых обслуживают продавцы, за которым закреплены более одного покупателя */
SELECT 
    *
FROM
    customers `outer`
WHERE
    EXISTS( SELECT 
            *
        FROM
            customers `inner`
        WHERE
            `inner`.snum = `outer`.cnum
                AND `inner`.cnum <> `outer`.cnum);
                
/*Комбинирование exists с соединениями*/
/* Вывод информации о продавцах, используя результаты предыдущего запроса*/
SELECT DISTINCT
    `first`.snum, sname, `first`.city
FROM
    salespeaple `first`, customers `second`
WHERE
    EXISTS( SELECT 
            *
        FROM
            customers `third`
        WHERE
            `second`.snum = `third`.snum
                 AND `second`.cnum <> `third`.cnum
                and `first`.snum = `second`.snum);
	
/* Использование NOT EXISTS */
/*Для каждого null значения в поле snum основной запрос выводит отдельную строку в виде результата, так как инвертируется логическое значение, возвращаемое оператором EXISTS*/
SELECT 
    *
FROM
    customers `outer`
WHERE
    NOT EXISTS( SELECT 
            *
        FROM
            customers `inner`
        WHERE
            `inner`.snum = `outer`.cnum
                AND `inner`.cnum <> `outer`.cnum);
      
/*Пример сложного подзапроса с exists */
/*Выводим информацию о продавцах, которые обслуживают покупателей с более, чем одним заказом*/
SELECT 
    *
FROM
    salespeaple `first`
WHERE
    EXISTS( SELECT 
            *
        FROM
            customers `second`
        WHERE
            `first`.snum = `second`.snum
                AND 1 < (SELECT 
                    COUNT(*)
                FROM
                    sales
                WHERE
                    sales.cnum = `second`.cnum));
                    
	/*Специальный оператор ANY*/
    /*Запрос выводит продавцов , живущих с покупателями в одном городе */
    SELECT 
    *
FROM
    salespeaple
WHERE
    city = ANY (SELECT 
            city
        FROM
            customers);
/* Запросы с операторами IN или Exists вместо any*/
/* Результат эквивалентен результату предыдущего запроса */
SELECT 
    *
FROM
    salespeaple
WHERE
    city IN (SELECT 
            city
        FROM
            customers);
/* Any в отличие от in может применяться с неравенством */
/* запрос выводит тех продавцов, чьи имена предшествуют именам покупателей, в алфавитном порядке */
SELECT 
    *
FROM
    salespeaple
WHERE
    sname < ANY (SELECT 
            cname
        FROM
            customers);
 
 /* Эквивалентный предыдущему запрос можно реализовать при помощи exists */
 /* различия в применении any  и exists  в том, что эни  работает в трехзначной логике, а exists в двузначной*/

 SELECT 
    *
FROM
    salespeaple `outer`
WHERE
    EXISTS( SELECT 
            *
        FROM
            customers `inner`
        WHERE
            `outer`.sname < `inner`.cname);
	/* Пример работы Any с числовым значениями, отбирается все рейтинги, которые больш минимального, возвращаемого подзапросом*/
SELECT 
    *
FROM
    customers
WHERE
    rating > ANY (SELECT 
            rating
        FROM
            customers
        WHERE
            city = 'Новосибирск');
   /* Отбираем те запрсы, которые сделаны на большую сумму чем хотя бы один из заказов от 12 сентября 2024*/         
   SELECT 
    *
FROM
    sales
WHERE
    amount > ANY (SELECT 
            amount
        FROM
            sales
        WHERE
            sdate = '2024-09-12');     
/* Пример использования any с соединением*/
SELECT 
    *
FROM
    sales
WHERE
    amount < ANY (SELECT 
            amount
        FROM
            sales a,
            customers b
        WHERE
            a.cnum = b.cnum
                AND b.city = 'Новосибирск');
  SELECT 
    *
FROM
    sales
WHERE
    amount < (SELECT 
            MAX(amount)
        FROM
            sales a,
            customers b
        WHERE
            a.cnum = b.cnum AND b.city = 'Омск');  
 /*специальный оператор all*/
 SELECT 
    *
FROM
    customers
WHERE
    rating < ALL (SELECT 
            rating
        FROM
            customers
        WHERE
            city = 'Санкт-Петербург');
 /* аналогичный предыдущему запрос с exists */
 SELECT 
    *
FROM
    customers `outer`
WHERE
    NOT EXISTS( SELECT 
            *
        FROM
            customers `inner`
        WHERE
            `outer`.rating >= `inner`.rating
                AND `inner`.city = 'Новосибирск');  
  
  /* применение all с неравенствами*/             
  SELECT 
    *
FROM
    customers
WHERE
    rating <> ALL (SELECT 
            rating
        FROM
            customers
        WHERE
            city = 'Санкт-Петербург');
/* аналог с any*/

SELECT 
    *
FROM
    customers
WHERE
    NOT rating = ANY (SELECT 
            rating
        FROM
            customers
        WHERE
            city = 'Санкт-Петербург');
/*Пример использования count() вместе exists*/
select * from customers `outer` where 1 >(select count(*) from customers `inner` where `outer`.rating = 
